name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger pipeline on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger pipeline on pull requests to the main branch

jobs:
  test:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment for the job

    services:
      postgres:
        image: postgres:13  # Use PostgreSQL version 13
        ports:
          - 5432:5432  # Map the default PostgreSQL port
        env:
          POSTGRES_USER: postgres  # Default user for PostgreSQL
          POSTGRES_PASSWORD: postgres  # Default password for PostgreSQL
          POSTGRES_DB: test_db  # Default database name for PostgreSQL
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Step 1: Check out the code repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'  # Specify Python version 3.9

      # Step 3: Install required dependencies
      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          python -m pip install --upgrade pip
          for package in $(cat requirements.txt); do
            if [[ $package == Django* ]]; then
              echo "Installing Django 4.2.18 for testing purposes..."
              python -m pip install Django==4.2.18
            else
              echo "Installing $package..."
              python -m pip install $package
            fi
          done

      # Step 4: Configure environment variables for tests
      - name: Set environment variables
        env:
          DEBUG: ${{ secrets.DEBUG }}  # DEBUG value from Environment Secrets
          SECRET_KEY: ${{ secrets.SECRET_KEY }}  # SECRET_KEY from Environment Secrets
        run: |
          echo "Setting environment variables for tests..."
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
          echo "DEBUG=${{ secrets.DEBUG }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV

      # Step 5: Apply database migrations
      - name: Run migrations
        run: |
          echo "Running migrations..."
          python manage.py migrate

      # Step 6: Run Django tests
      - name: Run tests
        run: |
          echo "Running test suite..."
          python manage.py test

  deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment for deployment
    needs: test  # Ensure tests pass before deploying

    steps:
      # Step 1: Check out the code repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Heroku using the API key
      - name: Log in to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}  # Heroku API key stored in GitHub Secrets
        run: |
          echo "Logging into Heroku..."
          echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com

      # Step 3: Deploy the application to Heroku
      - name: Deploy to Heroku
        run: |
          echo "Deploying application to Heroku..."
          git remote add heroku https://git.heroku.com/your-app-name.git
          git push heroku main
