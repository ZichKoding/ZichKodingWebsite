name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger pipeline on pushes to the main branch
      - develop # Trigger pipeline on pushes to the develop branch
  pull_request:
    branches:
      - main  # Trigger pipeline on pull requests to the main branch
      - develop # Trigger pipeline on pull requests to the develop branch

jobs:
  test:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment for the job
    environment: zichkoding  # Reference the environment with secrets

    services:
      postgres:
        image: postgres:13  # Use PostgreSQL version 13
        ports:
          - 5432:5432  # Map the default PostgreSQL port
        env:
          POSTGRES_USER: postgres  # Default user for PostgreSQL
          POSTGRES_PASSWORD: postgres  # Default password for PostgreSQL
          POSTGRES_DB: test_db  # Default database name for PostgreSQL
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Step 1: Check out the code repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'  # Specify Python version 3.9

      # Step 3: Install required dependencies
      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Configure environment variables for tests
      - name: Set environment variables
        env:
          DEBUG: ${{ secrets.DEBUG }}  # DEBUG value from Environment Secrets
          SECRET_KEY: ${{ secrets.SECRET_KEY }}  # SECRET_KEY from Environment Secrets
        run: |
          echo "Setting environment variables for tests..."
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
          echo "DEBUG=${{ secrets.DEBUG }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV

      # Step 5: Apply database migrations
      - name: Run migrations
        run: |
          echo "Running migrations..."
          python manage.py makemigrations home contact_me projects
          python manage.py migrate

      # Step 6: Verify database functionality
      - name: Verify database functionality
        run: |
          echo "Verifying database functionality..."
          python manage.py shell <<EOF
          from django.db import connection
          cursor = connection.cursor()
          cursor.execute("SELECT COUNT(*) FROM django_migrations;")
          print("Migrations table count:", cursor.fetchone())
          EOF

      # Step 7: Run Django tests
      - name: Run tests
        run: |
          echo "Running test suite..."
          python manage.py test
